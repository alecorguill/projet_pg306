module project
{
  exception UnknownAccount{};
  exception InsufficientFunds{};
  exception UnknownBank{};
  typedef sequence<string> strList;
  enum evt {withdraw,deposit,exception_t};

  struct Event{
    string id_account_src;
    string id_account_dst;
    string bank_id_src;
    string bank_id_dst;
    evt e;
    float amount;
  };
  typedef sequence<Event> eventList;
  
  struct mailbox{
    string id_bank;
    eventList mails;
  };


  interface InterBank
  {
    oneway void transfer(in string id_src, in string id_dst, in string bank_src, in string bank_dst, in float amount);
    void registerBank(in string bank_name);
    mailbox getJobs(in string id_bank);
    void handleException(in Event evt);
  };

  interface Bank{
    oneway void wakeUp();
    string getId();
    string createAccount(in string id_client);
    InterBank connectInterBank(in strList args, in string name);
    void deposit(in float amount, in string id_account) raises(UnknownAccount);
    void withdrawal(in float amount, in string id_account) raises(UnknownAccount, InsufficientFunds);
    strList getAllAccounts(in string id_client);
    float getBalance(in string id_account) raises(UnknownAccount);
    void intraTransfer(in string id_src, in string id_dst, in float amount) raises(UnknownAccount, InsufficientFunds);
    void interTransfer(in string id_src, in string id_dst, in string bank_id, in float amount) raises(UnknownBank, UnknownAccount, InsufficientFunds);
  };
    
};
